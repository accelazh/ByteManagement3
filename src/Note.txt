1. 文件数据结构的几种实现方法总结（各个方法可交融）：
   1. 一种是把数据分块，每一块放在一个数据结构中，存在磁盘上。需要时把，那一块的数据结构整个用Java 的对象流读进来
   2. 数据结构的键放在内存中，值放在磁盘上。磁盘上的文件实际上都不需要什么特殊的结构，因为数据结构实际上在内存中。
   3. 数据在文件里顺序存储，删除数据会在文件中造成空洞，此时defragment即可。此法较简单，但会造成已存储的文件的位置
       发生变化，如果是用键来访问文件中的数据，并且键也需要持久化，则键可能变的无效。（本项目就是因此而未采用这个方法）
   4. 键、值均存储在磁盘上，需要读取哪一块，直接读取出来。这种实现方式难度较大。（本项目采用的是这种方法）
   

2. 现存问题：
   1. BinaryBytePool使用2的幂次大小来分配空间，因为每块空间会添加头部控制数据，因此对于哈希表这类每次申请
   2的幂次空间的使用者来说，会浪费将近一倍的空间。这可以通过增加第二层分配器来解决，不过我不准备这么做了。
   
   2. 现在存储对象，需要经过：对象->字节数组->文件。中间这部是一个开销。但是，对于块内随机访问，提供面向字节
        的接口是有必要的。
   
3. Feature：
   1. 这套程序不仅是用于磁盘空间分配的，实际上，因为其底层使用接口设计，任何随机访问的字节存储空间，都可以处理。
         比如字节数组。
         
4. 感想：
   2010-9-19：本来是自己研究对象输入输出流框架的，做到哈希表，发现其实还是java的对象输入输出流好用。
   